import dns.resolver
import dns.exception
import dns.query
import dns.zone


def check_dns_vulnerability(ip_address):
    vulnerabilities = []
    test_domain = "example.com"

    try:
        # Check for amplification vulnerability
        vulnerabilities += check_dns_amplification(ip_address, test_domain)

        # Check for DNS zone transfer vulnerability
        vulnerabilities += check_dns_zone_transfer(ip_address, test_domain)

        # Additional checks can be added here
    except dns.exception.DNSException as e:
        vulnerabilities.append(f"Error checking DNS vulnerability: {str(e)}")

    return vulnerabilities if vulnerabilities else [
        "No known DNS vulnerabilities detected"]


def check_dns_amplification(ip_address, domain):
    findings = []
    try:
        resolver = dns.resolver.Resolver()
        resolver.nameservers = [ip_address]
        answers = resolver.query(domain, 'ANY')
        if answers and len(answers) > 1:
            findings.append(
                "DNS server is potentially vulnerable to amplification attacks.")
    except dns.exception.DNSException as e:
        if "metaqueries are not allowed" in str(e):
            findings.append(
                "DNS server properly configured to disallow metaqueries.")
    return findings


def check_dns_zone_transfer(ip_address, domain):
    findings = []
    try:
        zone = dns.zone.from_xfr(dns.query.xfr(ip_address, domain))
        names = zone.nodes.keys()
        if names:
            findings.append(
                f"DNS Zone Transfer allowed for {domain} (potential information leakage)")
    except dns.exception.DNSException as e:
        if "not authorized" in str(e):
            findings.append(
                f"DNS Zone Transfer not allowed for {domain} (secure)")
        elif "failed" in str(e):
            findings.append(
                f"DNS Zone Transfer failed for {domain} (potentially secure)")
    return findings
