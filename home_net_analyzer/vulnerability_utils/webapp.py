import requests


def check_webapp_vulnerability(ip_address, port):
    vulnerabilities = check_webapp_presence(ip_address, port)
    vulnerabilities += check_sql_injection(ip_address, port)

    return vulnerabilities or ["No known web app vulnerabilities detected"]


def check_webapp_presence(ip_address, port):
    vulnerabilities = []
    urls_to_test = get_relevant_urls(ip_address, port)

    for url in urls_to_test:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                vulnerabilities.append(f"Web application found at {url}")
        except requests.RequestException as e:
            vulnerabilities.append(f"Error checking {url}: {str(e)}")

    return vulnerabilities


def get_sql_injection_test_urls(ip_address, port):
    # General URLs applicable to most web applications
    general_urls = [
        f"http://{ip_address}:{port}/login",
        f"http://{ip_address}:{port}/admin",
        f"http://{ip_address}:{port}/search",
        f"http://{ip_address}:{port}/query",
        f"http://{ip_address}:{port}/user",
        f"http://{ip_address}:{port}/account",
        # ... other general URLs ...
    ]

    # Port-specific URLs
    port_specific_urls = {
        3000: [  # Node.js, React development servers
            f"http://{ip_address}:{port}/api",
            f"http://{ip_address}:{port}/dev",
            # ... Node.js/React specific URLs ...
        ],
        5000: [  # Flask development server
            f"http://{ip_address}:{port}/flask-admin",
            f"http://{ip_address}:{port}/flask-query",
            # ... Flask specific URLs ...
        ],
        8000: [  # Alternative HTTP port, common for web apps
            f"http://{ip_address}:{port}/config",
            f"http://{ip_address}:{port}/settings",
            # ... HTTP alternative specific URLs ...
        ],
        8080: [  # Frequently used for Java applications
            f"http://{ip_address}:{port}/java-admin",
            f"http://{ip_address}:{port}/servlet",
            f"http://{ip_address}:{port}/jmx-console",
            # ... Java specific URLs ...
        ],
        8443: [  # HTTPS services
            f"https://{ip_address}:{port}/secure",
            f"https://{ip_address}:{port}/ssladmin",
            # ... HTTPS specific URLs ...
        ],
        8888: [  # Jupyter Notebook default port
            f"http://{ip_address}:{port}/notebooks",
            f"http://{ip_address}:{port}/tree",
            # ... Jupyter specific URLs ...
        ],
        9000: [  # PHP-FPM, development tools
            f"http://{ip_address}:{port}/phpinfo",
            f"http://{ip_address}:{port}/php-status",
            # ... PHP specific URLs ...
        ],
        # ... additional port mappings ...
    }

    # Combine general URLs with port-specific URLs if any
    urls_to_test = general_urls + port_specific_urls.get(port, [])
    return urls_to_test


def check_sql_injection(ip_address, port):
    vulnerabilities = []
    urls_to_test = get_sql_injection_test_urls(
        ip_address, port)  # A subset or specific URLs for SQL tests

    for url in urls_to_test:
        try:
            response = requests.get(
                url + "'", timeout=10)  # Test for SQL Injection
            known_error_indicators = [
                "SQL syntax", "database error", "mysql_fetch_array",
                "SQLSTATE", "ODBC SQL Server Driver", "ORA-", "TNS:",
                "PL/SQL", "PostgreSQL query failed", "SQLiteException",
                "Unclosed quotation mark", "mysql error", "syntax error",
                "unterminated quoted string", "PDOException", "invalid query",
                "invalid syntax", "Microsoft OLE DB Provider for SQL Server",
                "Unclosed quotation mark after the character string",
                "You have an error in your SQL syntax", "Warning: mysql_",
                "Invalid SQL statement", "Fatal error", "mysql_fetch_assoc",
                "mysql_fetch_row", "mysqli_fetch_assoc", "pdo_fetch_assoc",
                "T_SQL", "Syntax error in string in query expression",
                "ADODB.Field error", "JDBC SQL", "mysql_num_rows",
                "pg_query", ": syntax error", "mysql_result", "pg_exec",
                "Syntax error or access violation", "mysql_fetch_object",
                "mysql_pconnect", "DB2 SQL", "CLI Driver", "DB2",
                "unexpected token", "unrecognized token", "syntax error at or near"
            ]

            if any(
                    indicator in response.text for indicator in known_error_indicators):
                vulnerabilities.append(
                    f"Potential SQL Injection vulnerability found at {url}"
                )
        except requests.RequestException:
            pass

    return vulnerabilities


def get_relevant_urls(ip_address, port):
    # Maps specific ports to their commonly associated URLs
    service_urls = {
        3000: [  # Common for Node.js, React, and other web development servers
            f"http://{ip_address}:{port}/admin",
            f"http://{ip_address}:{port}/api",
            f"http://{ip_address}:{port}/dashboard",
            # Add other Node.js/React specific URLs
        ],
        3306: [],  # MySQL - Generally, this port wouldn't serve web pages
        5000: [  # Often used by Flask and other Python web frameworks
            f"http://{ip_address}:{port}/admin",
            f"http://{ip_address}:{port}/login",
            f"http://{ip_address}:{port}/dashboard",
            # Add other Flask specific URLs
        ],
        5432: [],  # PostgreSQL - Typically doesn't serve web pages
        8000: [  # Common alternative HTTP port
            f"http://{ip_address}:{port}/phpmyadmin",
            f"http://{ip_address}:{port}/wordpress",
            f"http://{ip_address}:{port}/webmin",
            # ... other general web service URLs
        ],
        8001: [  # Alternative HTTP port, similar to 8000
            f"http://{ip_address}:{port}/management",
            f"http://{ip_address}:{port}/controlpanel",
            # ... other alternative service URLs
        ],
        8008: [  # Another alternative HTTP port
            f"http://{ip_address}:{port}/server-status",
            f"http://{ip_address}:{port}/server-info",
            # ... other server management URLs
        ],
        8010: [  # Used for HTTP services
            f"http://{ip_address}:{port}/admin",
            f"http://{ip_address}:{port}/status",
            # ... other administrative URLs
        ],
        8080: [  # Frequently used for HTTP services, especially in Java applications
            f"http://{ip_address}:{port}/tomcat/manager",
            f"http://{ip_address}:{port}/jboss/management",
            f"http://{ip_address}:{port}/weblogic/console",
            # ... other Java web server URLs
        ],
        8081: [  # Common alternative to port 8080
            f"http://{ip_address}:{port}/vnc",
            f"http://{ip_address}:{port}/websocket",
            # ... other web services or APIs
        ],
        8443: [  # Commonly used for HTTPS services (SSL/TLS)
            f"https://{ip_address}:{port}/admin",
            f"https://{ip_address}:{port}/secure",
            # ... other secure web service URLs
        ],
        8888: [  # Jupyter Notebook default port
            f"http://{ip_address}:{port}/tree",
            f"http://{ip_address}:{port}/notebooks",
            # ... other Jupyter specific URLs
        ],
        9000: [  # Used by some PHP-FPM installations and development tools
            f"http://{ip_address}:{port}/phpinfo.php",
            f"http://{ip_address}:{port}/phpmyadmin",
            # ... other PHP specific URLs
        ],
        9200: [  # Default port for Elasticsearch
            f"http://{ip_address}:{port}/_cat",
            f"http://{ip_address}:{port}/_search",
            # ... other Elasticsearch specific URLs
        ],
        9300: [],  # Elasticsearch nodes communication, typically not serving web pages
        10000: [  # Webmin - web-based system administration interface
            f"http://{ip_address}:{port}/session_login.cgi",
            f"http://{ip_address}:{port}/config",
            # ... other Webmin specific URLs
        ],
        27017: [],  # MongoDB NoSQL database, typically not serving web pages
    }

    # Default to root if no specific URLs
    return service_urls.get(port, [f"http://{ip_address}:{port}"])
