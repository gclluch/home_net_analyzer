import socket
import nmap


def check_ssh_vulnerability(ip_address):
    nm = nmap.PortScanner()
    try:
        nm.scan(
            ip_address,
            arguments='-p 22 --script ssh-hostkey,ssh2-enum-algos,sshv1')
        result = nm[ip_address]['tcp'][22]
        vulnerabilities = []

        # Check for weak algorithms
        vulnerabilities += check_weak_algorithms(result)

        # Check for vulnerable host keys
        vulnerabilities += check_host_keys(result)

        # Check for SSH version vulnerabilities
        vulnerabilities += check_ssh_version(ip_address)

        return vulnerabilities if vulnerabilities else [
            "No known SSH vulnerabilities detected"]
    except Exception as e:
        return [f"Error checking SSH vulnerability: {str(e)}"]


def check_weak_algorithms(result):
    findings = []
    if 'ssh2-enum-algos' in result['script']:
        if 'diffie-hellman-group1-sha1' in result['script']['ssh2-enum-algos']:
            findings.append(
                "Weak encryption algorithm (diffie-hellman-group1-sha1)")
    return findings


def check_host_keys(result):
    findings = []
    if 'ssh-hostkey' in result['script']:
        keys = result['script']['ssh-hostkey']
        for key_type, key_data in keys.items():
            if key_type in ['rsa', 'dsa', 'ecdsa']:
                key_length = int(key_data.split()[0])
                if key_type == 'rsa' and key_length < 2048:
                    findings.append(f"RSA key too short: {key_length} bits")
                elif key_type == 'dsa' and key_length != 1024:
                    findings.append("DSA key length not 1024 bits")
    return findings


def check_ssh_version(ip_address):
    findings = []
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((ip_address, 22))
            s.settimeout(5)
            banner = s.recv(1024).decode().strip()
            if 'SSH-1.' in banner:
                findings.append(
                    "SSH version 1.x detected, which is outdated and insecure")
            # Add checks for other known vulnerable SSH versions
    except socket.error as e:
        findings.append(f"Failed to retrieve SSH banner: {str(e)}")
    return findings
