import requests

def check_http_vulnerability(ip_address, port):
    try:
        url = f"http://{ip_address}:{port}" if port == 80 else f"https://{ip_address}:{port}"
        response = requests.get(url, timeout=10, verify=False)

        vulnerabilities = check_response_for_vulnerabilities(response)

        # Check for default pages indicating unconfigured server
        vulnerabilities += check_for_default_pages(url)

        return vulnerabilities if vulnerabilities else ["No known HTTP vulnerabilities detected"]
    except requests.ConnectionError:
        return ["Connection error (Is the server up?)"]
    except requests.Timeout:
        return ["Request timed out"]
    except requests.RequestException as e:
        return [f"HTTP check failed: {str(e)}"]

def check_response_for_vulnerabilities(response):
    vulnerabilities = []
    server_header = response.headers.get('Server', '')

    # Server header checks
    vulnerabilities += check_server_header(server_header)

    # Insecure HTTP methods check
    vulnerabilities += check_insecure_http_methods(response.headers)

    # Security headers check
    vulnerabilities += check_security_headers(response.headers)

    return vulnerabilities


def check_server_header(server_header):
    vulnerabilities = []
    if "Apache/2.2" in server_header:
        vulnerabilities.append("Potential vulnerability in Apache 2.2")
    elif "nginx/1.16" in server_header:
        vulnerabilities.append("Potential vulnerability in nginx 1.16")
    return vulnerabilities


def check_insecure_http_methods(headers):
    vulnerabilities = []
    if 'Allow' in headers:
        if 'TRACE' in headers['Allow']:
            vulnerabilities.append("HTTP TRACE method enabled")
        if 'PUT' in headers['Allow']:
            vulnerabilities.append("HTTP PUT method enabled")
    return vulnerabilities


def check_for_default_pages(url):
    vulnerabilities = []
    common_pages = ['index.html', 'index.php', '/phpinfo.php', '/server-status']
    for page in common_pages:
        resp = requests.get(f"{url}/{page}", timeout=10, verify=False)
        if resp.status_code == 200:
            if 'phpinfo()' in resp.text:
                vulnerabilities.append(f"Exposed phpinfo() at {page}")
            if 'Apache Status' in resp.text:
                vulnerabilities.append(f"Apache server status exposed at {page}")
    return vulnerabilities


def check_security_headers(response_headers):
    findings = []
    print('RESPONSE_HEADERS: ', response_headers)
    expected_headers = {
        'Strict-Transport-Security': 'HSTS not implemented.',
        'Content-Security-Policy': 'CSP not implemented.',
        'X-Frame-Options': 'Clickjacking protection missing.',
        'X-Content-Type-Options': 'MIME type sniffing protection missing.',
        'X-XSS-Protection': 'XSS protection not enabled.',
    }

    missing_headers = expected_headers.keys() - response_headers.keys()
    for header in missing_headers:
        findings.append(expected_headers[header])

    return findings