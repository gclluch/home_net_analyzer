from smb.SMBConnection import SMBConnection


def check_file_sharing_vulnerability(ip_address, port):
    vulnerabilities = []

    vulnerabilities += check_smbv1_usage(ip_address, port)
    vulnerabilities += check_smb_shares(ip_address, port)

    return vulnerabilities if vulnerabilities else [
        "No known SMB vulnerabilities detected"]


def check_smbv1_usage(ip_address, port):
    findings = []
    try:
        conn_v1 = SMBConnection('', '', 'temp', ip_address, use_ntlm_v2=False)
        if conn_v1.connect(ip_address, port, timeout=10):
            findings.append(
                f"SMBv1 protocol is enabled on port {port}, which is outdated and insecure.")
    except Exception as e:
        findings.append(f"Error checking SMBv1 vulnerability: {str(e)}")
    return findings


def check_smb_shares(ip_address, port):
    findings = []
    try:
        conn = SMBConnection('', '', 'temp', ip_address)
        if conn.connect(ip_address, port, timeout=10):
            shares = conn.listShares(timeout=10)
            for share in shares:
                if not share.isSpecial or share.name.endswith('$'):
                    continue
                # Check for writable shares
                if is_share_writable(conn, share.name):
                    findings.append(
                        f"Writable SMB share detected: {share.name}")
    except Exception as e:
        findings.append(f"Error checking share vulnerability: {str(e)}")
    return findings


def is_share_writable(conn, share_name):
    try:
        test_file_path = '/test_write.txt'
        conn.createFile(share_name, test_file_path)
        conn.deleteFiles(share_name, test_file_path)
        return True
    except BaseException:
        return False
