# vulnerability.py
from home_net_analyzer.utils import (
    check_ssh_vulnerability,
    check_ftp_vulnerability,
    check_http_vulnerability,
    check_smtp_vulnerability,
    check_dns_vulnerability,
    check_file_sharing_vulnerability,
    check_webapp_vulnerability
)
from home_net_analyzer.constants import WEBAPP_PORTS


def scan_vulnerabilities(ip_address, open_ports):
    vulnerabilities = {}
    for port in open_ports:
        print('PORT', port)
        if port == 22:  # SSH
            vulnerabilities[port] = check_ssh_vulnerability(ip_address)
        elif port in [80, 443]:  # HTTP/HTTPS
            vulnerabilities[port] = check_http_vulnerability(ip_address, port)
        elif port == 21:  # FTP
            vulnerabilities[port] = check_ftp_vulnerability(ip_address)
        elif port == 25 or port == 587:  # SMTP
            vulnerabilities[port] = check_smtp_vulnerability(ip_address)
        elif port == 53:  # DNS
            vulnerabilities[port] = check_dns_vulnerability(ip_address)
        elif port in [139, 445]:  # File sharing (SMB)
            vulnerabilities[port] = check_file_sharing_vulnerability(
                ip_address, port)
        elif port in WEBAPP_PORTS:  # See constants.py
            vulnerabilities[port] = check_webapp_vulnerability(
                ip_address, port)
# Example: Combined handling for HTTP/HTTPS and alternative web service ports
# if port in [80, 443, 8080, 8000, 5000]:
#     vulnerabilities[port] = check_http_vulnerability(ip_address, port)
#     vulnerabilities[port].extend(check_webapp_vulnerability(ip_address, port))

        # TODO
        # elif port in [3306, 5432, 27017]:  # Database services (MySQL, PostgreSQL, MongoDB)
        #     vulnerabilities[port] = check_database_vulnerability(ip_address, port)

    return vulnerabilities
